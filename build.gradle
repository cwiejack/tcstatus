buildscript {
    ext {
        kotlinVersion = '1.0.5-2'
        springBootVersion = '1.4.1.RELEASE'
        junitPlatformVersion = '1.0.0-M2'
        junitJupiterVersion = '5.0.0-M2'
        log4JVersion = '2.7'
        junit4Version = '4.12'
        junitVintageVersion = '4.12.0-M2'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath "gradle.plugin.com.github.opengl-8080:assertjGen-gradle-plugin:1.1.0"
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: "com.github.opengl-BOBO.assertjGen"
apply plugin: 'spring-boot'
apply plugin: 'org.junit.platform.gradle.plugin'

jar {
    baseName = 'tcstatus'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/jetbrains/teamcity-rest-client"
    }
}

configurations {
    all*.exclude module: "spring-boot-starter-tomcat"
    all*.exclude module: "spring-boot-starter-logging"
}

dependencies {
    compile('com.vaadin:vaadin-spring-boot-starter:1.0.2')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot')
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    compile('commons-cli:commons-cli:1.3.1')
    compile("com.vaadin:vaadin-themes")
    compile("com.vaadin:vaadin-push")
    compile 'org.jetbrains.teamcity:teamcity-rest-client:0.1.49'
    compile 'com.google.guava:guava:20.0'
    compile 'org.apache.commons:commons-lang3:3.5'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.mockito:mockito-core:2.2.15')
    testCompile 'org.assertj:assertj-core:3.5.2'

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testCompile("junit:junit:${junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

    testRuntime("org.apache.logging.log4j:log4j-core:${log4JVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4JVersion}")

    testCompile "com.nhaarman:mockito-kotlin:0.12.0"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
}

sourceSets {
    test {
        java {
            srcDirs "${buildDir}/test-generated/java"
        }
    }
}

compileTestJava {
    options.compilerArgs += '-parameters'
}

junitPlatform {
    // platformVersion '1.0.0-SNAPSHOT'
    engines {
        // include 'junit-jupiter', 'junit-vintage'
        // exclude 'custom-engine'
    }
    tags {
        // include 'fast'
        exclude 'slow'
    }
    // includeClassNamePattern '.*Test'
    // enableStandardTestTask true
    // reportsDir "build/test-results/junit-platform" // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

assertjGen {
    // specify target class or package names by array. (defailt is empty array)
    classOrPackageNames = ['de.swp.model']

    // specify output dir(String path or File object). (default is 'src/test/java-gen')
    outputDir = 'build/test-generated/java'

    // specify AssertJ Assertions Generator dependency. (default is ver 2.0.0)
    assertjGenerator = 'org.assertj:assertj-assertions-generator:2.0.0'
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:7.7.3"
    }
}
